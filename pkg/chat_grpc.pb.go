// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: chat.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatroomClient is the client API for Chatroom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatroomClient interface {
	CreateConversation(ctx context.Context, in *ConversationRequest, opts ...grpc.CallOption) (*ConversationResponse, error)
	Converse(ctx context.Context, opts ...grpc.CallOption) (Chatroom_ConverseClient, error)
}

type chatroomClient struct {
	cc grpc.ClientConnInterface
}

func NewChatroomClient(cc grpc.ClientConnInterface) ChatroomClient {
	return &chatroomClient{cc}
}

func (c *chatroomClient) CreateConversation(ctx context.Context, in *ConversationRequest, opts ...grpc.CallOption) (*ConversationResponse, error) {
	out := new(ConversationResponse)
	err := c.cc.Invoke(ctx, "/pkg.Chatroom/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatroomClient) Converse(ctx context.Context, opts ...grpc.CallOption) (Chatroom_ConverseClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chatroom_ServiceDesc.Streams[0], "/pkg.Chatroom/Converse", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatroomConverseClient{stream}
	return x, nil
}

type Chatroom_ConverseClient interface {
	Send(*ChatEvent) error
	Recv() (*ChatEvent, error)
	grpc.ClientStream
}

type chatroomConverseClient struct {
	grpc.ClientStream
}

func (x *chatroomConverseClient) Send(m *ChatEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatroomConverseClient) Recv() (*ChatEvent, error) {
	m := new(ChatEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatroomServer is the server API for Chatroom service.
// All implementations must embed UnimplementedChatroomServer
// for forward compatibility
type ChatroomServer interface {
	CreateConversation(context.Context, *ConversationRequest) (*ConversationResponse, error)
	Converse(Chatroom_ConverseServer) error
	mustEmbedUnimplementedChatroomServer()
}

// UnimplementedChatroomServer must be embedded to have forward compatible implementations.
type UnimplementedChatroomServer struct {
}

func (UnimplementedChatroomServer) CreateConversation(context.Context, *ConversationRequest) (*ConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedChatroomServer) Converse(Chatroom_ConverseServer) error {
	return status.Errorf(codes.Unimplemented, "method Converse not implemented")
}
func (UnimplementedChatroomServer) mustEmbedUnimplementedChatroomServer() {}

// UnsafeChatroomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatroomServer will
// result in compilation errors.
type UnsafeChatroomServer interface {
	mustEmbedUnimplementedChatroomServer()
}

func RegisterChatroomServer(s grpc.ServiceRegistrar, srv ChatroomServer) {
	s.RegisterService(&Chatroom_ServiceDesc, srv)
}

func _Chatroom_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatroomServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.Chatroom/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatroomServer).CreateConversation(ctx, req.(*ConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatroom_Converse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatroomServer).Converse(&chatroomConverseServer{stream})
}

type Chatroom_ConverseServer interface {
	Send(*ChatEvent) error
	Recv() (*ChatEvent, error)
	grpc.ServerStream
}

type chatroomConverseServer struct {
	grpc.ServerStream
}

func (x *chatroomConverseServer) Send(m *ChatEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatroomConverseServer) Recv() (*ChatEvent, error) {
	m := new(ChatEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Chatroom_ServiceDesc is the grpc.ServiceDesc for Chatroom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatroom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.Chatroom",
	HandlerType: (*ChatroomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _Chatroom_CreateConversation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Converse",
			Handler:       _Chatroom_Converse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
